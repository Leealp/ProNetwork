{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlphaLy\\\\Desktop\\\\SMU-coding-bootcamp\\\\work\\\\Project_3\\\\ProNetwork\\\\client\\\\src\\\\components\\\\profile\\\\Profile.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport ProfileTop from './ProfileTop';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileExperience from './ProfileExperience';\nimport { getProfileById } from '../../actions/profile';\n\nconst Profile = ({\n  getProfileById,\n  profile: {\n    profile,\n    loading\n  },\n  auth,\n  match\n}) => {\n  useEffect(() => {\n    getProfileById(match.params.id);\n  }, [getProfileById, match.params.id]);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, profile === null || loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/profiles\",\n    className: \"btn btn-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Back To Profiles\"), auth.isAuthenticated && auth.loading === false && auth.user._id === profile.user._id && React.createElement(Link, {\n    to: \"/edit-profile\",\n    className: \"btn btn-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Edit Profile\"), React.createElement(\"div\", {\n    className: \"profile-grid my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(ProfileTop, {\n    profile: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(ProfileAbout, {\n    profile: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"profile-exp bg-white p-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Experience\"), profile.experience.length > 0 ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, profile.experience.map(experience => React.createElement(ProfileExperience, {\n    key: experience._id,\n    experience: experience,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))) : React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"No experience credentials\")))));\n};\n\nProfile.propTypes = {\n  getProfileById: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getProfileById\n})(Profile);","map":{"version":3,"sources":["C:\\Users\\AlphaLy\\Desktop\\SMU-coding-bootcamp\\work\\Project_3\\ProNetwork\\client\\src\\components\\profile\\Profile.js"],"names":["React","Fragment","useEffect","PropTypes","Link","connect","Spinner","ProfileTop","ProfileAbout","ProfileExperience","getProfileById","Profile","profile","loading","auth","match","params","id","isAuthenticated","user","_id","experience","length","map","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport ProfileTop from './ProfileTop';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileExperience from './ProfileExperience';\r\nimport { getProfileById } from '../../actions/profile';\r\n\r\nconst Profile = ({\r\n        getProfileById,\r\n        profile: { profile, loading },\r\n        auth,\r\n        match\r\n}) => {\r\n    useEffect(() => {\r\n        getProfileById(match.params.id);\r\n      }, [getProfileById, match.params.id]);\r\n\r\n  return (\r\n    <Fragment>\r\n       {profile === null || loading ? ( \r\n       <Spinner /> \r\n       ) : ( \r\n        <Fragment>\r\n        <Link to='/profiles' className='btn btn-light'>\r\n            Back To Profiles\r\n          </Link>\r\n          {auth.isAuthenticated &&\r\n            auth.loading === false &&\r\n            auth.user._id === profile.user._id && (\r\n                <Link to='/edit-profile' className='btn btn-dark'>\r\n                Edit Profile\r\n            </Link>\r\n            )}\r\n            <div className=\"profile-grid my-1\">\r\n                <ProfileTop profile={profile} />\r\n                <ProfileAbout profile={profile} />\r\n                <div className='profile-exp bg-white p-2' >\r\n                <h2 className='text-primary'>Experience</h2>\r\n                {profile.experience.length > 0 ? (\r\n                <Fragment>\r\n                  {profile.experience.map(experience => (\r\n                    <ProfileExperience\r\n                      key={experience._id}\r\n                      experience={experience}\r\n                    />\r\n                  ))}\r\n                </Fragment>\r\n              ) : (\r\n                <h4>No experience credentials</h4>\r\n              )}\r\n            </div>\r\n          </div>\r\n       </Fragment>\r\n       )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n    getProfileById: PropTypes.func.isRequired,\r\n    profile: PropTypes.object.isRequired,\r\n    auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profile,\r\n    auth: state.auth\r\n  });\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getProfileById }\r\n  )(Profile);\r\n"]},"metadata":{},"sourceType":"module"}